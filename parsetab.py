
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDECOLON COMMA COMMENT DEDENT DIVIDE EQUALS EQUALTO FLOAT GREATER ID INDENT INTEGER LESS LPAREN MINUS NEWLINE NOTEQUALTO PLUS RPAREN SPACE STRING TIMES elif else for if in input print range whilestatements : statement\n            | statement NEWLINE statements\n            | statement statementsstatement : assign\n            | expr\n            | input_stmt\n            | print_stmt\n            | if_stmt\n            | for_stmt\n            | while_stmtassign : ID EQUALS exprexpr : expr PLUS term\n            | expr MINUS term\n            | term\n            | LPAREN expr RPARENterm : term TIMES factor\n           | term DIVIDE factor\n           | factorfactor : INTEGER\n              | ID\n              | STRING\n              | FLOATinput_stmt : ID EQUALS input LPAREN RPARENprint_stmt : print LPAREN expr RPARENcomp_op : expr GREATER expr\n            | expr LESS expr\n            | expr EQUALTO expr\n            | expr NOTEQUALTO exprif_stmt : if comp_op COLON block\n            | if comp_op COLON block elif_stmt\n            | if comp_op COLON block else_block elif_stmt : elif comp_op COLON block\n            | elif comp_op COLON block elif_stmt\n            | elif comp_op COLON block else_block else_block : else COLON blockblock : INDENT statements\n            | INDENT statements DEDENTfor_stmt : for ID in range target_list COLON block target_list : expr\n            | LPAREN expr COMMA expr RPARENwhile_stmt : while comp_op COLON block'
    
_lr_action_items = {'ID':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,35,36,37,38,40,41,42,45,46,47,48,52,53,54,59,60,61,62,63,64,66,69,72,76,77,78,79,81,82,],[10,10,-4,-5,-6,-7,-8,-9,-10,-20,-14,29,29,33,29,-18,-19,-21,-22,10,-3,29,29,29,29,29,-20,29,-2,-12,-13,-11,-16,-17,-15,29,29,29,29,-24,-29,10,29,-41,-23,-30,-31,29,-36,29,-37,-35,-38,29,-32,-33,-34,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,25,29,30,35,36,37,38,39,40,41,42,45,46,47,48,52,53,54,59,60,61,62,63,64,66,69,72,76,77,78,79,81,82,],[12,12,-4,-5,-6,-7,-8,-9,-10,-20,-14,12,30,12,12,-18,-19,-21,-22,12,-3,12,-20,12,-2,-12,-13,-11,51,-16,-17,-15,12,12,12,12,-24,-29,12,69,-41,-23,-30,-31,12,-36,12,-37,-35,-38,12,-32,-33,-34,]),'print':([0,2,3,4,5,6,7,8,9,10,11,17,18,19,20,21,22,29,35,36,37,38,40,41,42,52,53,54,60,61,62,63,66,72,76,77,79,81,82,],[13,13,-4,-5,-6,-7,-8,-9,-10,-20,-14,-18,-19,-21,-22,13,-3,-20,-2,-12,-13,-11,-16,-17,-15,-24,-29,13,-41,-23,-30,-31,-36,-37,-35,-38,-32,-33,-34,]),'if':([0,2,3,4,5,6,7,8,9,10,11,17,18,19,20,21,22,29,35,36,37,38,40,41,42,52,53,54,60,61,62,63,66,72,76,77,79,81,82,],[14,14,-4,-5,-6,-7,-8,-9,-10,-20,-14,-18,-19,-21,-22,14,-3,-20,-2,-12,-13,-11,-16,-17,-15,-24,-29,14,-41,-23,-30,-31,-36,-37,-35,-38,-32,-33,-34,]),'for':([0,2,3,4,5,6,7,8,9,10,11,17,18,19,20,21,22,29,35,36,37,38,40,41,42,52,53,54,60,61,62,63,66,72,76,77,79,81,82,],[15,15,-4,-5,-6,-7,-8,-9,-10,-20,-14,-18,-19,-21,-22,15,-3,-20,-2,-12,-13,-11,-16,-17,-15,-24,-29,15,-41,-23,-30,-31,-36,-37,-35,-38,-32,-33,-34,]),'while':([0,2,3,4,5,6,7,8,9,10,11,17,18,19,20,21,22,29,35,36,37,38,40,41,42,52,53,54,60,61,62,63,66,72,76,77,79,81,82,],[16,16,-4,-5,-6,-7,-8,-9,-10,-20,-14,-18,-19,-21,-22,16,-3,-20,-2,-12,-13,-11,-16,-17,-15,-24,-29,16,-41,-23,-30,-31,-36,-37,-35,-38,-32,-33,-34,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,29,30,35,36,37,38,40,41,42,45,46,47,48,52,53,54,59,60,61,62,63,64,66,69,72,76,77,78,79,81,82,],[18,18,-4,-5,-6,-7,-8,-9,-10,-20,-14,18,18,18,-18,-19,-21,-22,18,-3,18,18,18,18,18,-20,18,-2,-12,-13,-11,-16,-17,-15,18,18,18,18,-24,-29,18,18,-41,-23,-30,-31,18,-36,18,-37,-35,-38,18,-32,-33,-34,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,29,30,35,36,37,38,40,41,42,45,46,47,48,52,53,54,59,60,61,62,63,64,66,69,72,76,77,78,79,81,82,],[19,19,-4,-5,-6,-7,-8,-9,-10,-20,-14,19,19,19,-18,-19,-21,-22,19,-3,19,19,19,19,19,-20,19,-2,-12,-13,-11,-16,-17,-15,19,19,19,19,-24,-29,19,19,-41,-23,-30,-31,19,-36,19,-37,-35,-38,19,-32,-33,-34,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,29,30,35,36,37,38,40,41,42,45,46,47,48,52,53,54,59,60,61,62,63,64,66,69,72,76,77,78,79,81,82,],[20,20,-4,-5,-6,-7,-8,-9,-10,-20,-14,20,20,20,-18,-19,-21,-22,20,-3,20,20,20,20,20,-20,20,-2,-12,-13,-11,-16,-17,-15,20,20,20,20,-24,-29,20,20,-41,-23,-30,-31,20,-36,20,-37,-35,-38,20,-32,-33,-34,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,17,18,19,20,22,29,35,36,37,38,40,41,42,52,53,60,61,62,63,66,72,76,77,79,81,82,],[0,-1,-4,-5,-6,-7,-8,-9,-10,-20,-14,-18,-19,-21,-22,-3,-20,-2,-12,-13,-11,-16,-17,-15,-24,-29,-41,-23,-30,-31,-36,-37,-35,-38,-32,-33,-34,]),'DEDENT':([2,3,4,5,6,7,8,9,10,11,17,18,19,20,22,29,35,36,37,38,40,41,42,52,53,60,61,62,63,66,72,76,77,79,81,82,],[-1,-4,-5,-6,-7,-8,-9,-10,-20,-14,-18,-19,-21,-22,-3,-20,-2,-12,-13,-11,-16,-17,-15,-24,-29,-41,-23,-30,-31,72,-37,-35,-38,-32,-33,-34,]),'elif':([2,3,4,5,6,7,8,9,10,11,17,18,19,20,22,29,35,36,37,38,40,41,42,52,53,60,61,62,63,66,72,76,77,79,81,82,],[-1,-4,-5,-6,-7,-8,-9,-10,-20,-14,-18,-19,-21,-22,-3,-20,-2,-12,-13,-11,-16,-17,-15,-24,64,-41,-23,-30,-31,-36,-37,-35,-38,64,-33,-34,]),'else':([2,3,4,5,6,7,8,9,10,11,17,18,19,20,22,29,35,36,37,38,40,41,42,52,53,60,61,62,63,66,72,76,77,79,81,82,],[-1,-4,-5,-6,-7,-8,-9,-10,-20,-14,-18,-19,-21,-22,-3,-20,-2,-12,-13,-11,-16,-17,-15,-24,65,-41,-23,-30,-31,-36,-37,-35,-38,65,-33,-34,]),'NEWLINE':([2,3,4,5,6,7,8,9,10,11,17,18,19,20,22,29,35,36,37,38,40,41,42,52,53,60,61,62,63,66,72,76,77,79,81,82,],[21,-4,-5,-6,-7,-8,-9,-10,-20,-14,-18,-19,-21,-22,-3,-20,-2,-12,-13,-11,-16,-17,-15,-24,-29,-41,-23,-30,-31,-36,-37,-35,-38,-32,-33,-34,]),'PLUS':([4,10,11,17,18,19,20,28,29,32,36,37,38,40,41,42,43,55,56,57,58,68,74,80,],[23,-20,-14,-18,-19,-21,-22,23,-20,23,-12,-13,23,-16,-17,-15,23,23,23,23,23,23,23,23,]),'MINUS':([4,10,11,17,18,19,20,28,29,32,36,37,38,40,41,42,43,55,56,57,58,68,74,80,],[24,-20,-14,-18,-19,-21,-22,24,-20,24,-12,-13,24,-16,-17,-15,24,24,24,24,24,24,24,24,]),'EQUALS':([10,],[25,]),'TIMES':([10,11,17,18,19,20,29,36,37,40,41,],[-20,26,-18,-19,-21,-22,-20,26,26,-16,-17,]),'DIVIDE':([10,11,17,18,19,20,29,36,37,40,41,],[-20,27,-18,-19,-21,-22,-20,27,27,-16,-17,]),'RPAREN':([11,17,18,19,20,28,29,36,37,40,41,42,43,51,74,80,],[-14,-18,-19,-21,-22,42,-20,-12,-13,-16,-17,-15,52,61,42,83,]),'GREATER':([11,17,18,19,20,29,32,36,37,40,41,42,],[-14,-18,-19,-21,-22,-20,45,-12,-13,-16,-17,-15,]),'LESS':([11,17,18,19,20,29,32,36,37,40,41,42,],[-14,-18,-19,-21,-22,-20,46,-12,-13,-16,-17,-15,]),'EQUALTO':([11,17,18,19,20,29,32,36,37,40,41,42,],[-14,-18,-19,-21,-22,-20,47,-12,-13,-16,-17,-15,]),'NOTEQUALTO':([11,17,18,19,20,29,32,36,37,40,41,42,],[-14,-18,-19,-21,-22,-20,48,-12,-13,-16,-17,-15,]),'COLON':([11,17,18,19,20,29,31,34,36,37,40,41,42,55,56,57,58,65,67,68,70,83,],[-14,-18,-19,-21,-22,-20,44,50,-12,-13,-16,-17,-15,-25,-26,-27,-28,71,73,-39,75,-40,]),'COMMA':([11,17,18,19,20,29,36,37,40,41,42,74,],[-14,-18,-19,-21,-22,-20,-12,-13,-16,-17,-15,78,]),'input':([25,],[39,]),'in':([33,],[49,]),'INDENT':([44,50,71,73,75,],[54,54,54,54,54,]),'range':([49,],[59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,2,21,54,],[1,22,35,66,]),'statement':([0,2,21,54,],[2,2,2,2,]),'assign':([0,2,21,54,],[3,3,3,3,]),'expr':([0,2,12,14,16,21,25,30,45,46,47,48,54,59,64,69,78,],[4,4,28,32,32,4,38,43,55,56,57,58,4,68,32,74,80,]),'input_stmt':([0,2,21,54,],[5,5,5,5,]),'print_stmt':([0,2,21,54,],[6,6,6,6,]),'if_stmt':([0,2,21,54,],[7,7,7,7,]),'for_stmt':([0,2,21,54,],[8,8,8,8,]),'while_stmt':([0,2,21,54,],[9,9,9,9,]),'term':([0,2,12,14,16,21,23,24,25,30,45,46,47,48,54,59,64,69,78,],[11,11,11,11,11,11,36,37,11,11,11,11,11,11,11,11,11,11,11,]),'factor':([0,2,12,14,16,21,23,24,25,26,27,30,45,46,47,48,54,59,64,69,78,],[17,17,17,17,17,17,17,17,17,40,41,17,17,17,17,17,17,17,17,17,17,]),'comp_op':([14,16,64,],[31,34,70,]),'block':([44,50,71,73,75,],[53,60,76,77,79,]),'elif_stmt':([53,79,],[62,81,]),'else_block':([53,79,],[63,82,]),'target_list':([59,],[67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statement','statements',1,'p_statements','Parser.py',12),
  ('statements -> statement NEWLINE statements','statements',3,'p_statements','Parser.py',13),
  ('statements -> statement statements','statements',2,'p_statements','Parser.py',14),
  ('statement -> assign','statement',1,'p_statement','Parser.py',23),
  ('statement -> expr','statement',1,'p_statement','Parser.py',24),
  ('statement -> input_stmt','statement',1,'p_statement','Parser.py',25),
  ('statement -> print_stmt','statement',1,'p_statement','Parser.py',26),
  ('statement -> if_stmt','statement',1,'p_statement','Parser.py',27),
  ('statement -> for_stmt','statement',1,'p_statement','Parser.py',28),
  ('statement -> while_stmt','statement',1,'p_statement','Parser.py',29),
  ('assign -> ID EQUALS expr','assign',3,'p_assign','Parser.py',33),
  ('expr -> expr PLUS term','expr',3,'p_expr','Parser.py',37),
  ('expr -> expr MINUS term','expr',3,'p_expr','Parser.py',38),
  ('expr -> term','expr',1,'p_expr','Parser.py',39),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','Parser.py',40),
  ('term -> term TIMES factor','term',3,'p_term','Parser.py',52),
  ('term -> term DIVIDE factor','term',3,'p_term','Parser.py',53),
  ('term -> factor','term',1,'p_term','Parser.py',54),
  ('factor -> INTEGER','factor',1,'p_factor','Parser.py',64),
  ('factor -> ID','factor',1,'p_factor','Parser.py',65),
  ('factor -> STRING','factor',1,'p_factor','Parser.py',66),
  ('factor -> FLOAT','factor',1,'p_factor','Parser.py',67),
  ('input_stmt -> ID EQUALS input LPAREN RPAREN','input_stmt',5,'p_input_stmt','Parser.py',71),
  ('print_stmt -> print LPAREN expr RPAREN','print_stmt',4,'p_print','Parser.py',75),
  ('comp_op -> expr GREATER expr','comp_op',3,'p_comp_op','Parser.py',79),
  ('comp_op -> expr LESS expr','comp_op',3,'p_comp_op','Parser.py',80),
  ('comp_op -> expr EQUALTO expr','comp_op',3,'p_comp_op','Parser.py',81),
  ('comp_op -> expr NOTEQUALTO expr','comp_op',3,'p_comp_op','Parser.py',82),
  ('if_stmt -> if comp_op COLON block','if_stmt',4,'p_if_stmt','Parser.py',93),
  ('if_stmt -> if comp_op COLON block elif_stmt','if_stmt',5,'p_if_stmt','Parser.py',94),
  ('if_stmt -> if comp_op COLON block else_block','if_stmt',5,'p_if_stmt','Parser.py',95),
  ('elif_stmt -> elif comp_op COLON block','elif_stmt',4,'p_elif_stmt','Parser.py',102),
  ('elif_stmt -> elif comp_op COLON block elif_stmt','elif_stmt',5,'p_elif_stmt','Parser.py',103),
  ('elif_stmt -> elif comp_op COLON block else_block','elif_stmt',5,'p_elif_stmt','Parser.py',104),
  ('else_block -> else COLON block','else_block',3,'p_else_block','Parser.py',111),
  ('block -> INDENT statements','block',2,'p_block','Parser.py',115),
  ('block -> INDENT statements DEDENT','block',3,'p_block','Parser.py',116),
  ('for_stmt -> for ID in range target_list COLON block','for_stmt',7,'p_for_stmt','Parser.py',120),
  ('target_list -> expr','target_list',1,'p_target_list','Parser.py',124),
  ('target_list -> LPAREN expr COMMA expr RPAREN','target_list',5,'p_target_list','Parser.py',125),
  ('while_stmt -> while comp_op COLON block','while_stmt',4,'p_while_stmt','Parser.py',132),
]
